import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from utils import load_full, combine_runs_to_one

plt.rcParams["font.family"] = "Times New Roman"

g1_f1_results = {50: [[43.42, 48.59, 56.27, 59.03, 59.91, 60.34, 60.59, 60.71, 60.99, 60.9], [30.91, 35.04, 51.56, 57.07, 58.6, 59.06, 59.28, 59.44, 59.56, 59.63], [47.14, 52.26, 57.9, 59.61, 60.22, 60.56, 60.66, 60.8, 60.67, 60.84], [38.01, 43.59, 54.8, 58.14, 59.55, 60.1, 60.49, 60.27, 60.5, 60.48], [45.48, 51.51, 58.02, 60.14, 60.8, 61.02, 61.19, 61.35, 61.5, 61.47], [47.93, 53.47, 58.19, 59.59, 60.3, 60.5, 60.71, 60.67, 60.8, 60.82], [44.84, 50.32, 57.52, 59.54, 60.66, 60.89, 61.18, 61.19, 61.32, 61.29], [49.46, 54.44, 58.7, 60.19, 60.72, 61.03, 61.05, 61.12, 61.18, 61.17]], 400: [[55.02, 59.12, 61.78, 62.62, 63.0, 63.08, 63.18, 63.25, 63.2, 63.2], [54.04, 57.94, 61.11, 61.87, 62.13, 62.34, 62.45, 62.5, 62.5, 62.44], [54.96, 58.73, 61.37, 62.5, 62.79, 62.9, 63.01, 63.05, 63.08, 63.18], [54.73, 58.64, 61.76, 62.86, 63.36, 63.39, 63.68, 63.61, 63.71, 63.65], [54.62, 58.74, 61.69, 62.86, 63.01, 63.26, 63.21, 63.36, 63.3, 63.26], [54.81, 58.45, 60.9, 61.76, 62.22, 62.33, 62.43, 62.42, 62.47, 62.46], [55.06, 59.43, 62.12, 62.69, 63.3, 63.4, 63.57, 63.53, 63.57, 63.61], [54.29, 58.21, 61.08, 61.77, 61.95, 62.13, 62.13, 62.19, 62.14, 62.27]], 100: [[48.1, 53.22, 58.74, 60.33, 60.89, 61.21, 61.24, 61.42, 61.52, 61.7], [50.44, 55.54, 59.67, 61.07, 61.64, 61.78, 61.83, 61.92, 61.9, 61.98], [50.4, 55.92, 60.09, 61.24, 61.98, 62.16, 62.31, 62.24, 62.24, 62.33], [48.78, 54.04, 59.88, 61.69, 62.29, 62.31, 62.4, 62.51, 62.51, 62.61], [51.7, 56.36, 59.86, 61.09, 61.33, 61.39, 61.46, 61.46, 61.56, 61.68], [50.52, 55.38, 59.64, 60.92, 61.55, 61.65, 61.76, 61.73, 61.86, 61.98], [51.62, 56.47, 60.33, 61.35, 61.65, 61.81, 62.02, 62.09, 62.12, 62.16], [49.16, 53.93, 59.6, 61.06, 61.85, 62.02, 62.29, 62.33, 62.4, 62.49]], 200: [[53.28, 57.32, 60.32, 61.59, 61.93, 62.01, 62.16, 62.09, 62.25, 62.28], [52.11, 56.39, 59.67, 60.84, 61.36, 61.48, 61.67, 61.65, 61.74, 61.73], [50.15, 55.06, 59.52, 61.0, 61.71, 61.92, 62.15, 62.16, 62.07, 62.33], [53.53, 57.65, 60.23, 61.27, 61.84, 61.96, 62.12, 62.19, 62.19, 62.18], [52.76, 56.89, 60.04, 61.49, 61.79, 62.01, 62.05, 62.24, 62.19, 62.23], [53.01, 56.9, 60.19, 61.16, 61.21, 61.58, 61.73, 61.82, 61.92, 61.88], [50.92, 55.56, 59.64, 60.95, 61.59, 61.73, 61.84, 61.85, 61.86, 61.89], [50.73, 56.27, 60.24, 61.52, 62.14, 62.26, 62.35, 62.34, 62.34, 62.36]], 25: [[48.47, 53.85, 59.17, 60.62, 61.2, 61.56, 61.53, 61.55, 61.56, 61.54], [45.49, 51.27, 58.18, 60.17, 60.8, 61.03, 61.32, 61.42, 61.5, 61.45], [39.74, 46.04, 56.28, 59.26, 59.82, 60.19, 60.39, 60.49, 60.56, 60.65], [35.04, 39.99, 53.08, 57.01, 58.39, 58.84, 59.23, 59.43, 59.62, 59.63], [21.91, 24.46, 44.96, 54.3, 57.35, 58.64, 59.06, 59.32, 59.47, 59.67, 59.75], [40.33, 46.13, 56.09, 58.87, 59.48, 60.08, 60.27, 60.31, 60.47, 60.59], [28.04, 31.55, 51.06, 57.04, 58.5, 59.23, 59.6, 59.79, 60.04, 60.13], [34.35, 39.47, 54.27, 58.23, 59.68, 60.43, 61.03, 61.15, 61.39, 61.45]]}
g2_f1_results = {3200: [[42.08, 42.66, 45.6, 46.63, 47.24, 47.49, 47.62, 47.76, 47.75, 47.84], [40.85, 41.46, 44.91, 46.32, 46.66, 46.83, 46.87, 46.97, 47.06, 47.09], [42.75, 43.37, 46.33, 47.11, 47.48, 47.56, 47.63, 47.68, 47.73, 47.71], [41.78, 42.27, 45.18, 46.42, 46.86, 47.12, 47.28, 47.41, 47.37, 47.37], [41.6, 42.13, 45.52, 46.65, 46.97, 47.03, 47.16, 47.23, 47.26, 47.3], [42.32, 42.77, 45.43, 46.58, 47.04, 47.38, 47.48, 47.57, 47.53, 47.64], [42.38, 42.88, 46.06, 47.15, 47.53, 47.56, 47.65, 47.7, 47.75, 47.7], [42.66, 43.14, 46.11, 47.26, 47.58, 47.81, 48.01, 47.99, 48.05, 48.12]], 1600: [[32.92, 33.49, 37.41, 39.59, 40.4, 40.82, 41.0, 41.07, 41.12, 41.17], [32.5, 32.91, 36.75, 38.93, 40.06, 40.62, 40.93, 41.07, 41.13, 41.2], [33.48, 33.94, 37.9, 39.79, 40.8, 41.14, 41.2, 41.23, 41.32, 41.34], [33.75, 34.29, 38.11, 39.86, 41.04, 41.8, 42.05, 42.13, 42.21, 42.27, 42.26], [32.25, 32.74, 36.78, 38.84, 39.76, 40.31, 40.41, 40.52, 40.53, 40.56], [33.31, 33.82, 37.2, 38.9, 40.03, 40.71, 40.9, 41.11, 41.27, 41.32], [31.99, 32.42, 36.38, 38.38, 39.46, 40.2, 40.54, 40.78, 41.05, 41.18], [32.46, 32.76, 36.99, 38.71, 39.66, 40.26, 40.48, 40.59, 40.63, 40.67]], 800: [[24.64, 24.94, 29.81, 32.38, 33.46, 34.26, 34.73, 35.32, 35.63, 36.1], [25.07, 25.4, 30.18, 33.29, 34.88, 35.47, 36.1, 36.64, 37.16, 37.19, 37.2], [24.21, 24.49, 29.41, 32.36, 33.74, 34.49, 34.98, 35.47, 35.76, 36.15, 36.38], [24.97, 25.33, 30.09, 32.72, 34.06, 34.73, 35.22, 35.4, 35.6, 36.21, 36.55], [22.64, 22.95, 27.76, 30.3, 31.96, 32.92, 33.45, 34.06, 34.69, 35.43, 36.08], [25.8, 26.17, 30.4, 32.78, 33.96, 34.52, 34.91, 35.28, 35.63, 36.2, 36.81], [22.31, 22.5, 27.98, 31.12, 33.0, 33.87, 34.49, 34.99, 35.39, 35.77, 36.06], [26.36, 26.64, 30.65, 33.04, 33.94, 34.41, 34.77, 35.15, 35.66, 36.22]], 400: [[15.42, 15.67, 21.55, 25.39, 27.98, 29.8, 30.87, 31.62, 32.26, 32.61, 33.31, 33.74], [16.73, 16.99, 22.72, 27.13, 29.47, 30.49, 31.05, 31.5, 31.82, 32.08, 32.54], [18.83, 19.12, 24.46, 27.69, 29.82, 30.93, 31.44, 31.79, 32.26, 32.79, 33.4], [15.92, 15.99, 21.83, 26.48, 29.35, 30.87, 31.45, 31.97, 32.47, 33.19, 33.67, 33.84], [16.69, 16.91, 22.33, 26.48, 29.15, 30.68, 31.74, 32.3, 32.86, 33.2, 33.56, 33.81], [16.52, 16.83, 22.5, 26.2, 28.44, 29.78, 30.55, 31.19, 31.64, 31.94, 32.18, 32.53], [20.23, 20.41, 25.1, 27.99, 29.81, 31.25, 32.28, 32.92, 33.64, 34.18, 34.33, 34.44], [12.79, 12.95, 17.83, 21.87, 25.64, 28.12, 29.79, 30.39, 30.72, 31.14, 31.46, 31.74, 32.14]], 200: [[1.57, 1.59, 1.8, 1.9, 1.96, 1.96, 2.02, 2.05, 2.1, 2.11], [1.98, 1.98, 2.38, 2.48, 2.62, 2.66, 2.67, 2.74, 2.71, 2.76], [2.38, 2.4, 2.94, 3.18, 3.5, 3.74, 3.91, 3.98, 4.09, 4.14], [5.22, 5.18, 6.78, 8.03, 9.43, 11.21, 14.04, 18.26, 22.08, 24.24, 25.99, 26.83, 27.32, 27.59, 27.82, 27.91, 28.1], [6.05, 6.21, 8.24, 10.4, 14.23, 19.13, 22.59, 24.74, 25.91, 26.86, 27.51, 28.05, 28.39, 28.67, 29.12], [8.47, 8.5, 12.35, 16.25, 20.77, 24.08, 26.42, 27.36, 28.1, 28.58, 28.77, 28.9, 28.86], [1.5, 1.56, 1.81, 1.86, 1.88, 1.89, 1.89, 1.93, 1.98, 1.97], [1.47, 1.49, 1.7, 1.74, 1.77, 1.79, 1.82, 1.81, 1.89, 1.88]]}

# heat_f1 = {(6, 0.7, 400): [59.07, 60.52, 64.74, 67.08, 68.08, 70.07, 69.99, 69.71, 69.55, 69.54], (6, 0.7, 200): [58.25, 60.49, 66.34, 67.68, 68.27, 70.27, 70.16, 69.82, 69.89, 69.86], (6, 0.7, 60): [54.25, 56.65, 63.44, 65.5, 66.15, 68.12, 68.02, 67.86, 67.96, 68.04], (3, 0.4, 400): [7.82, 7.85, 8.65, 8.92, 8.99, 8.79, 9.27, 9.33, 9.26, 9.29], (3, 0.4, 200): [3.09, 3.15, 3.56, 3.55, 3.6, 3.38, 3.64, 3.64, 3.64, 3.65], (3, 0.4, 800): [23.95, 24.21, 28.61, 32.91, 35.39, 36.3, 32.82, 36.38, 37.15, 37.34, 37.43], (4, 0.6, 600): [55.21, 56.7, 66.29, 70.48, 72.03, 72.38, 73.9, 74.51, 74.74, 74.8], (4, 0.6, 150): [44.67, 45.98, 59.7, 65.83, 68.59, 69.85, 70.14, 71.88, 72.75, 73.1, 73.22], (4, 0.6, 300): [16.16, 16.38, 27.33, 38.78, 48.15, 55.77, 60.76, 63.42, 64.82, 65.76, 68.54, 69.88, 70.57, 70.99], (5, 0.8, 50): [70.38, 71.02, 71.24, 71.25, 71.24, 74.04, 72.09, 71.43, 71.37, 71.34]}
# {(6, 0.7, 400): [46.0, 47.28, 50.52, 52.42, 53.32, 66.3, 56.85, 55.62, 55.31, 55.24], (6, 0.7, 200): [45.18, 47.14, 51.92, 52.95, 53.43, 66.29, 57.08, 55.79, 55.64, 55.58], (6, 0.7, 60): [41.54, 43.6, 48.98, 50.57, 51.13, 63.76, 54.73, 53.57, 53.46, 53.47], (3, 0.4, 400): [5.18, 5.2, 5.46, 5.5, 5.52, 7.82, 6.29, 5.91, 5.76, 5.75], (3, 0.4, 200): [2.03, 2.07, 2.19, 2.13, 2.15, 2.91, 2.42, 2.25, 2.21, 2.2], (3, 0.4, 800): [16.22, 16.41, 18.97, 21.67, 23.34, 23.96, 30.66, 25.77, 24.97, 24.84, 24.85], (4, 0.6, 600): [45.39, 46.75, 54.46, 57.93, 59.38, 69.21, 63.39, 62.68, 62.6, 62.57], (4, 0.6, 150): [36.17, 37.34, 47.96, 53.04, 55.46, 56.59, 66.98, 61.27, 60.67, 60.68, 60.71], (4, 0.6, 300): [12.56, 12.76, 19.9, 28.18, 35.75, 42.34, 46.88, 49.35, 50.68, 62.67, 57.92, 57.62, 57.82, 58.08], (5, 0.8, 50): [55.07, 55.69, 55.93, 55.94, 55.93, 73.43, 57.21, 56.18, 56.09, 56.07]}
# {(6, 0.7, 400): [61578, 63120, 66972, 69404, 70600, 86980, 74112, 72770, 72528, 72428], (6, 0.7, 200): [59456, 62238, 69682, 70808, 71320, 87362, 75008, 73662, 73444, 73386], (6, 0.7, 60): [56184, 59106, 66776, 68596, 69286, 85630, 73066, 71658, 71458, 71430], (3, 0.4, 400): [12258, 12112, 12418, 12036, 12024, 26786, 15584, 13258, 12680, 12482], (3, 0.4, 200): [10394, 10284, 10798, 10436, 10444, 24648, 14174, 11890, 11332, 11176], (3, 0.4, 800): [16390, 16372, 17304, 18690, 19768, 20066, 34902, 22868, 20968, 20620, 20572], (4, 0.6, 600): [106638, 108896, 121750, 127414, 129786, 153956, 137568, 134978, 134522, 134370], (4, 0.6, 150): [89882, 91898, 111126, 120142, 124042, 125846, 152714, 135464, 132666, 132218, 132192], (4, 0.6, 300): [51332, 52034, 62768, 76684, 89964, 101566, 110072, 114612, 116884, 149678, 132096, 129338, 128952, 129102], (5, 0.8, 50): [516780, 537110, 546424, 546428, 546432, 601262, 548790, 546928, 546782, 546786]}
# {(6, 0.7, 400): [82.49, 84.06, 90.11, 93.13, 94.15, 74.29, 91.04, 93.35, 93.68, 93.84], (6, 0.7, 200): [81.96, 84.41, 91.84, 93.75, 94.5, 74.75, 91.02, 93.29, 93.93, 94.02], (6, 0.7, 60): [78.16, 80.85, 90.02, 92.94, 93.69, 73.13, 89.83, 92.52, 93.27, 93.52], (3, 0.4, 400): [15.94, 16.0, 20.83, 23.68, 24.15, 10.03, 17.62, 22.07, 23.51, 24.19], (3, 0.4, 200): [6.5, 6.59, 9.41, 10.69, 11.06, 4.02, 7.39, 9.48, 10.33, 10.66], (3, 0.4, 800): [45.75, 46.14, 58.15, 68.45, 73.15, 74.84, 35.32, 61.8, 72.53, 75.17, 75.76], (4, 0.6, 600): [70.47, 72.03, 84.7, 89.95, 91.52, 75.85, 88.58, 91.86, 92.71, 92.95], (4, 0.6, 150): [58.38, 59.82, 79.05, 86.75, 89.86, 91.22, 73.61, 86.95, 90.83, 91.91, 92.21], (4, 0.6, 300): [22.66, 22.9, 43.6, 62.16, 73.74, 81.68, 86.32, 88.73, 89.92, 69.16, 83.94, 88.76, 90.52, 91.28], (5, 0.8, 50): [97.47, 97.98, 98.09, 98.11, 98.08, 74.66, 97.44, 98.06, 98.07, 98.04]}

cm_subsection = reversed(np.linspace(0.2, 0.50, 7))
colors = [cm.jet(x) for x in cm_subsection]


def g1_to_heatmap(results):
    new = {}
    for seed, values in results.items():
        avg_values = [calc_avg([val[iter_num] for val in values]) for iter_num in range(9)]
        new[(1, 0.6, seed)] = avg_values

    return new

def build_dif(results: dict):
    graphs = list(results.keys())
    iterations = []
    for iter in range(8):
        iter_diffs = []
        for graph in graphs:
            running = results[graph]
            dif = max((running[iter + 1] - running[iter]) / running[iter + 1], 0)
            # dif = max((running[iter + 1] - running[iter]), 0)
            # dif = (running[iter + 1] - running[iter])
            iter_diffs.append(dif)

        iterations.append(iter_diffs)
    return iterations, graphs


def heatmap(data, row_labels, col_labels, ax=None,
            cbar_kw=None, cbarlabel="", **kwargs):
    """
    Create a heatmap from a numpy array and two lists of labels.

    Parameters
    ----------
    data
        A 2D numpy array of shape (M, N).
    row_labels
        A list or array of length M with the labels for the rows.
    col_labels
        A list or array of length N with the labels for the columns.
    ax
        A `matplotlib.axes.Axes` instance to which the heatmap is plotted.  If
        not provided, use current axes or create a new one.  Optional.
    cbar_kw
        A dictionary with arguments to `matplotlib.Figure.colorbar`.  Optional.
    cbarlabel
        The label for the colorbar.  Optional.
    **kwargs
        All other arguments are forwarded to `imshow`.
    """

    if ax is None:
        ax = plt.gca()

    if cbar_kw is None:
        cbar_kw = {}

    # Plot the heatmap
    im = ax.imshow(data, **kwargs)

    # Create colorbar
    cbar = ax.figure.colorbar(im, ax=ax, **cbar_kw)
    cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

    # Show all ticks and label them with the respective list entries.
    ax.set_xticks(np.arange(data.shape[1]), labels=col_labels)
    ax.set_yticks(np.arange(data.shape[0]), labels=row_labels)

    # Let the horizontal axes labeling appear on top.
    ax.tick_params(top=True, bottom=False,
                   labeltop=True, labelbottom=False)

    # Rotate the tick labels and set their alignment.
    plt.setp(ax.get_xticklabels(), rotation=-30, ha="right",
             rotation_mode="anchor")

    # Turn spines off and create white grid.
    ax.spines[:].set_visible(False)

    ax.set_xticks(np.arange(data.shape[1]+1)-.5, minor=True)
    ax.set_yticks(np.arange(data.shape[0]+1)-.5, minor=True)
    ax.grid(which="minor", color="w", linestyle='-', linewidth=3)
    ax.tick_params(which="minor", bottom=False, left=False)

    return im, cbar


def sort_by_first(a, b, c):
    temp = sorted(zip(a, b, c))

    a = [element[0] for element in temp]
    b = [element[1] for element in temp]
    c = [element[2] for element in temp]
    return a, b, c


def process_results(results: dict):
    new_dict = {}
    for params, arr in results.items():
        arr = [a[0] for a in arr]
        avg = sum(arr) / len(arr)
        error = np.std(arr) / np.sqrt(len(arr))
        new_dict[params] = (avg, error)
    return new_dict


def calc_avg(arr):
    return sum(arr) / len(arr)


def calc_error(arr):
    return np.std(arr) / np.sqrt(len(arr))


def plot_figures(results: dict, ax):
    seeds = list(results.keys())
    ax.tick_params(axis="x", labelsize=7)
    ax.set_xticks(ticks=seeds)
    ax.grid()

    for iter_num in range(6):
        x = []
        y = []
        err = []
        for seed, seed_results in results.items():
            seed_iter_results = [running[iter_num] for running in seed_results]
            avg = calc_avg(seed_iter_results)
            error = calc_error(seed_iter_results)

            x.append(seed)
            y.append(avg)
            err.append(error)

        x, y, err = sort_by_first(x, y, err)
        ax.errorbar(x, y, yerr=err, label=f"iteration {iter_num}", color=colors[iter_num], capsize=4, capthick=1) #, color=colors[iter_num])

        # for cap in caps:
        #     cap.set_markeredgewidth(1)


    ax.set_xlabel("Seed size")
    ax.set_ylabel("F1-score")
    ax.legend()


def plot_heatmap(iterations, keys, ax):
    # keys = (graph, overlap, seed)
    # a, keys, _ = sort_by_first([params[1] * params[2] for params in keys], keys, keys)
    a, keys, _ = sort_by_first([params[2] for params in keys], keys, keys)
    # print(a, keys)
    heatmap(np.array(iterations), np.arange(1, 9), keys, ax=ax)
    ax.set_ylabel("Iteration")
    ax.set_xlabel("Graph parameters")
    # ax.set_title("Delta in F1-score")
    ax.set_title(r'$\lambda$')

    # ax.tick_params(axis="x", labelsize=7, rotation=90)
    # ax.set_xticks(np.arange(len(keys)), labels=keys)
    # ax.set_yticks(np.arange(8), labels=np.arange(1, 9))


fig, axs = plt.subplots(1, 3, figsize=(15, 3))
# fig, axs = plt.subplots(1, 4, figsize=(18, 3))

axs[0].set_title("G1")
plot_figures(g1_f1_results, axs[0])

axs[1].set_title("G2")
plot_figures(g2_f1_results, axs[1])

# heat_f1 = g1_to_heatmap(g2_f1_results)
heat_f1 = load_full("./results_heatmap/f1.pkl")
heat_f1 = {params: combine_runs_to_one(runs)[0] for params, runs in heat_f1.items()}
iterations, keys = build_dif(heat_f1)
plot_heatmap(iterations, keys, axs[2])

# heat_f1 = load_full("./results_heatmap/times.pkl")
# heat_f1 = {params: combine_runs_to_one(runs)[0] for params, runs in heat_f1.items()}
# iterations, keys = build_dif(heat_f1)
# plot_heatmap(iterations, keys, axs[3])
#
# heat_f1 = load_full("./results_heatmap/precision.pkl")
# heat_f1 = {params: combine_runs_to_one(runs)[0] for params, runs in heat_f1.items()}
# iterations, keys = build_dif(heat_f1)
# plot_heatmap(iterations, keys, axs[4])


plt.savefig("./figures/svg/fig5.svg", format='svg', bbox_inches='tight')
plt.savefig("./figures/png/fig5.png", format='png', bbox_inches='tight')
plt.savefig("./figures/eps/fig5.eps", format='eps', bbox_inches='tight')
plt.show()
